import argparse
import logging
from datetime import datetime
from agent.graph import run_conversion_pipeline
from agent.tools.env_loader import load_env


def setup_logging():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å —ñ —Ñ–∞–π–ª"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
    log_file = f"logs/run_{timestamp}.log"
    logging.basicConfig(
        level=logging.DEBUG,
        format="%(asctime)s [%(levelname)s] %(message)s",
        handlers=[
            logging.FileHandler(log_file, encoding="utf-8"),
            logging.StreamHandler()
        ]
    )
    logging.info(f"üß† –õ–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ ‚Üí {log_file}")
    return log_file


def main():
    load_env()  # –∑—á–∏—Ç—É—î–º–æ .env —ñ –≤–∏–≤–æ–¥–∏–º–æ –∫–ª—é—á–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    log_path = setup_logging()

    parser = argparse.ArgumentParser(description="Rails ‚Üí Django LLM Converter")
    parser.add_argument("--input", required=True, help="–®–ª—è—Ö –¥–æ Rails-–ø—Ä–æ—î–∫—Ç—É")
    parser.add_argument("--output", required=True, help="–®–ª—è—Ö –¥–ª—è Django-–≤–∏–≤–æ–¥—É")
    args = parser.parse_args()

    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞...")
    run_conversion_pipeline(args.input, args.output, log_path)
    logging.info("‚úÖ –ö–æ–Ω–≤–µ—Ä—Å—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")


if __name__ == "__main__":
    main()
