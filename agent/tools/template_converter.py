import re
import logging
from pathlib import Path
from agent.tools.file_tools import list_files, read_file, write_file, ensure_dir


def convert_erb_to_django(erb_content: str) -> str:
    """
    –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î ERB-—à–∞–±–ª–æ–Ω –∑ Rails —É HTML-—à–∞–±–ª–æ–Ω —É —Å—Ç–∏–ª—ñ Django.
    –û—Å–Ω–æ–≤–Ω–∞ —ñ–¥–µ—è ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è Ruby-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É <%= %> —É {{ }},
    –∞ <% %> —É {% %}.
    """
    # <%= expression %> ‚Üí {{ expression }}
    html = re.sub(r"<%=\s*(.*?)\s*%>", r"{{ \1 }}", erb_content)

    # <% code %> ‚Üí {% code %}
    html = re.sub(r"<%\s*(.*?)\s*%>", r"{% \1 %}", html)

    # Ruby –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ ‚Üí HTML –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
    html = re.sub(r"<%#\s*(.*?)\s*%>", r"<!-- \1 -->", html)

    # –ó–∞–º—ñ–Ω—é—î–º–æ Ruby –∑–º—ñ–Ω–Ω—ñ @var ‚Üí var
    html = re.sub(r"@(\w+)", r"\1", html)

    # –ó–∞–º—ñ–Ω–∞ Ruby —É–º–æ–≤ –Ω–∞ Django —Ç–µ–≥–∏
    html = html.replace("if", "if").replace("elsif", "elif").replace("end", "endif")

    # –ß–∞—Å—Ç–∫–æ–≤—ñ —Ä–µ–Ω–¥–µ—Ä–∏ <%= render 'partial' %> ‚Üí {% include 'partial.html' %}
    html = re.sub(r"{%\s*include\s*['\"]([\w\/]+)['\"]\s*%}", r"{% include '\1.html' %}", html)
    html = re.sub(r"{{\s*render\s*['\"]([\w\/]+)['\"]\s*}}", r"{% include '\1.html' %}", html)

    return html


def convert_erb_file(erb_file: str, out_dir: str):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç—É—î –æ–¥–∏–Ω ERB-—Ñ–∞–π–ª —É HTML-—à–∞–±–ª–æ–Ω Django.
    """
    content = read_file(erb_file)
    converted = convert_erb_to_django(content)

    rel_path = Path(erb_file).name.replace(".erb", ".html")
    ensure_dir(out_dir)
    write_file(Path(out_dir) / rel_path, converted)

    logging.debug(f"üß© –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ —à–∞–±–ª–æ–Ω {erb_file} ‚Üí {rel_path}")


def batch_convert_erb(rails_views_dir: str, django_templates_dir: str):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î –≤—Å—ñ Rails-—à–∞–±–ª–æ–Ω–∏ (ERB) —É Django-—à–∞–±–ª–æ–Ω–∏.
    """
    erb_files = list_files(rails_views_dir, [".erb", ".html.erb"])
    logging.info(f"üé® –ó–Ω–∞–π–¥–µ–Ω–æ {len(erb_files)} ERB —à–∞–±–ª–æ–Ω—ñ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó...")

    for erb_file in erb_files:
        relative = Path(erb_file).relative_to(rails_views_dir)
        out_path = Path(django_templates_dir) / relative.parent
        ensure_dir(out_path)
        convert_erb_file(erb_file, str(out_path))

    logging.info(f"‚úÖ –£—Å—ñ —à–∞–±–ª–æ–Ω–∏ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ —É {django_templates_dir}")
