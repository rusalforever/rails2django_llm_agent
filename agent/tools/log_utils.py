import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Any


def setup_logging(log_dir: str = "logs"):
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ —á–∞—Å–æ–º, –∫–æ–ª—å–æ—Ä–∞–º–∏ —ñ —Ñ–∞–π–ª–æ–º –¥–ª—è –∑–∞–ø–∏—Å—É.
    """
    Path(log_dir).mkdir(exist_ok=True)
    timestamp = datetime.now().strftime("run_%Y%m%d_%H%M")
    log_path = Path(log_dir) / f"{timestamp}.log"

    logging.basicConfig(
        level=logging.DEBUG,
        format="%(asctime)s [%(levelname)s] %(message)s",
        handlers=[
            logging.FileHandler(log_path, encoding="utf-8"),
            logging.StreamHandler()
        ]
    )

    logging.info(f"üìù Logging to: {log_path}")
    return log_path


def log_state(node_name: str, state: Any):
    """
    –õ–æ–≥—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤—É–∑–ª–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON.
    """
    try:
        # –£–Ω–∏–∫–∞—î–º–æ –Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏—Ö –¥–∞–Ω–∏—Ö (—è–∫—â–æ —î —Ñ–∞–π–ª–∏)
        filtered = {}
        for k, v in state.__dict__.items():
            if isinstance(v, (str, int, float, bool, list, dict, type(None))):
                filtered[k] = v
            else:
                filtered[k] = str(v)

        state_json = json.dumps(filtered, indent=2, ensure_ascii=False)
        logging.debug(f"\nüì¶ STATE SNAPSHOT AFTER [{node_name}]\n{state_json}\n")

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ —Å—Ç–∞–Ω—É: {e}")


def log_llm_call(node_name: str, prompt: str, response: str):
    """
    –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è LLM –≤–∏–∫–ª–∏–∫—ñ–≤ (prompt + response).
    """
    logging.debug(f"\n--- LLM CALL [{node_name}] ---")
    logging.debug(f"[PROMPT ‚Üì]\n{prompt.strip()}\n")
    logging.debug(f"[RESPONSE ‚Üì]\n{response.strip()}\n")
    logging.debug(f"--- END LLM CALL ---\n")


def summarize_state_changes(old_state: Any, new_state: Any) -> str:
    """
    –ü–æ—Ä—ñ–≤–Ω—é—î –∑–º—ñ–Ω–∏ —É state –¥–æ —ñ –ø—ñ—Å–ª—è –Ω–æ–¥–∏.
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
    """
    try:
        summary = []
        old_dict = old_state.__dict__
        new_dict = new_state.__dict__

        for key, new_val in new_dict.items():
            old_val = old_dict.get(key)
            if new_val != old_val:
                summary.append(f"üîπ {key}: {old_val} ‚Üí {new_val}")

        if summary:
            msg = "\n".join(summary)
        else:
            msg = "üü¢ –ë–µ–∑ –∑–º—ñ–Ω —É state."

        logging.info(f"üìä –ó–º—ñ–Ω–∏ –ø—ñ—Å–ª—è –Ω–æ–¥–∏:\n{msg}")
        return msg

    except Exception as e:
        logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Å—Ç–∞–Ω–∏: {e}")
        return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∑–º—ñ–Ω."
