import os
import logging
from pathlib import Path
from typing import List, Optional


def list_files(base_dir: str, extensions: Optional[List[str]] = None) -> List[str]:
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó base_dir.
    –ú–æ–∂–Ω–∞ –≤–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—à–∏—Ä–µ–Ω—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ['.rb', '.erb']).
    """
    base_path = Path(base_dir)
    if not base_path.exists():
        logging.warning(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {base_path}")
        return []

    result = []
    for root, _, files in os.walk(base_path):
        for f in files:
            if not extensions or any(f.endswith(ext) for ext in extensions):
                result.append(str(Path(root) / f))
    logging.debug(f"üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ {len(result)} —Ñ–∞–π–ª—ñ–≤ —É {base_dir}")
    return result


def read_file(file_path: str) -> str:
    """
    –ó—á–∏—Ç—É—î –≤–º—ñ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É –∑ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º UTF-8.
    """
    path = Path(file_path)
    if not path.exists():
        logging.error(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
        return ""
    try:
        with open(path, "r", encoding="utf-8") as f:
            content = f.read()
            logging.debug(f"üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Ñ–∞–π–ª: {file_path} ({len(content)} —Å–∏–º–≤.)")
            return content
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ {file_path}: {e}")
        return ""


def write_file(file_path: str, content: str):
    """
    –ó–∞–ø–∏—Å—É—î —Ç–µ–∫—Å—Ç —É —Ñ–∞–π–ª. –°—Ç–≤–æ—Ä—é—î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î.
    """
    path = Path(file_path)
    try:
        path.parent.mkdir(parents=True, exist_ok=True)
        with open(path, "w", encoding="utf-8") as f:
            f.write(content)
        logging.debug(f"üíæ –ó–∞–ø–∏—Å–∞–Ω–æ —Ñ–∞–π–ª: {file_path} ({len(content)} —Å–∏–º–≤.)")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ —É {file_path}: {e}")


def ensure_dir(directory: str):
    """
    –ü–µ—Ä–µ–∫–æ–Ω—É—î—Ç—å—Å—è, —â–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —ñ—Å–Ω—É—î.
    """
    path = Path(directory)
    if not path.exists():
        path.mkdir(parents=True, exist_ok=True)
        logging.debug(f"üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {path}")
    else:
        logging.debug(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î: {path}")


def copy_static_assets(src: str, dst: str):
    """
    –ö–æ–ø—ñ—é—î —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ (CSS, JS, images) –∑ Rails —É Django-–ø—Ä–æ—î–∫—Ç.
    """
    from shutil import copytree, ignore_patterns

    try:
        if not Path(src).exists():
            logging.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç–∏—á–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {src}")
            return
        copytree(src, dst, dirs_exist_ok=True, ignore=ignore_patterns("*.pyc", "__pycache__"))
        logging.info(f"‚ú® –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –∑ {src} ‚Üí {dst}")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏: {e}")
