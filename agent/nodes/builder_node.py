import os
import json
import logging
import subprocess
from pathlib import Path
from agent.tools.django_builder import build_django_project
from agent.tools.log_utils import log_state
from agent.state import ConversionState


class LLMProjectBuilderNode:
    """
    –ü–æ–±—É–¥–æ–≤–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Django-–ø—Ä–æ—î–∫—Ç—É –∑–≥—ñ–¥–Ω–æ –∑ –ø–ª–∞–Ω–æ–º,
    —Å—Ç–≤–æ—Ä–µ–Ω–∏–º LLMConverterNode.
    """

    def __call__(self, state: ConversionState):
        node = "LLMProjectBuilderNode"
        logging.info(f"[4/6] üèóÔ∏è {node} started...")

        if not state.django_plan:
            raise ValueError("‚ùå Missing Django plan in state ‚Äî run converter first.")

        out_dir = Path(state.output_dir).resolve()
        proj_name = "converted_project"

        # --- 1Ô∏è‚É£ —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—î–∫—Ç—É ---
        subprocess.run(["django-admin", "startproject", proj_name, str(out_dir)], check=False)
        state.project_root = str(out_dir / proj_name)

        # --- 2Ô∏è‚É£ –±—É–¥—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ Django-app-–∏ ---
        build_django_project(state.django_plan, Path(state.project_root))

        # --- 3Ô∏è‚É£ –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
        log_state(node, state)
        logging.info(f"‚úÖ {node} completed. Project root: {state.project_root}")

        return state
