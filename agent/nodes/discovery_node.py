import os
import logging
from pathlib import Path
from agent.tools.log_utils import log_state, log_llm_call
from agent.tools.rails_parser import parse_rails_app
from agent.state import ConversionState


class LLMDiscoveryNode:
    """
    –ê–Ω–∞–ª—ñ–∑—É—î Rails-–ø—Ä–æ—î–∫—Ç —ñ —Å—Ç–≤–æ—Ä—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –π–æ–≥–æ —Å–∫–ª–∞–¥–æ–≤–∏—Ö.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ª–æ–∫–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–µ—Ä + LLM –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏.
    """

    def __init__(self, client, prompt_path="agent/prompts/discovery_prompt.txt"):
        self.client = client
        self.prompt_path = Path(prompt_path)

    def __call__(self, state: ConversionState):
        node = "LLMDiscoveryNode"
        logging.info(f"[2/6] üîç {node} started...")

        input_dir = Path(state.input_dir)
        if not input_dir.exists():
            raise FileNotFoundError(f"‚ùå Input directory not found: {input_dir}")

        # --- –ö—Ä–æ–∫ 1: –õ–æ–∫–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ ---
        rails_structure = parse_rails_app(input_dir)
        state.rails_structure = rails_structure

        # --- –ö—Ä–æ–∫ 2: –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ LLM ---
        prompt_template = self.prompt_path.read_text(encoding="utf-8")
        prompt = prompt_template.replace("{{rails_structure}}", str(rails_structure))

        # --- –ö—Ä–æ–∫ 3: –í–∏–∫–ª–∏–∫ LLM –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ ---
        response = self.client.chat.completions.create(
            model=os.getenv("MODEL_NAME", "gpt-4o"),
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
        )
        llm_output = response.choices[0].message.content.strip()
        log_llm_call(node, prompt, llm_output)

        # --- –ö—Ä–æ–∫ 4: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è ---
        state.rails_summary = llm_output
        log_state(node, state)

        logging.info(f"‚úÖ {node} completed. Files analyzed: {len(rails_structure.get('files', []))}")
        return state
