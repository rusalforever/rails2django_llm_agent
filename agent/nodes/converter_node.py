import os
import json
import logging
from pathlib import Path
from agent.tools.log_utils import log_state, log_llm_call
from agent.state import ConversionState


class LLMConverterNode:
    """
    –û—Å–Ω–æ–≤–Ω–∏–π –≤—É–∑–æ–ª –¥–ª—è LLM-–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó Rails —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —É Django.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä–æ–º–ø—Ç –∑ –æ–ø–∏—Å–æ–º Rails –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏ (–∑ discovery_node)
    —Ç–∞ –≥–µ–Ω–µ—Ä—É—î JSON-–ø–ª–∞–Ω Django-–ø—Ä–æ—î–∫—Ç—É (apps, models, views, urls, templates).
    """

    def __init__(self, client, prompt_path="agent/prompts/convert_prompt.txt"):
        self.client = client
        self.prompt_path = Path(prompt_path)

    def __call__(self, state: ConversionState):
        node = "LLMConverterNode"
        logging.info(f"[3/6] üîÑ {node} started...")

        if not state.rails_structure:
            raise ValueError("‚ùå Missing Rails structure in state ‚Äî run discovery first.")

        # --- –ö—Ä–æ–∫ 1: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ ---
        prompt_template = self.prompt_path.read_text(encoding="utf-8")
        prompt = (
            prompt_template
            .replace("{{rails_structure}}", json.dumps(state.rails_structure, indent=2))
        )

        # --- –ö—Ä–æ–∫ 2: –í–∏–∫–ª–∏–∫ LLM ---
        response = self.client.chat.completions.create(
            model=os.getenv("MODEL_NAME", "gpt-4o"),
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
        )
        llm_output = response.choices[0].message.content.strip()

        log_llm_call(node, prompt, llm_output)

        # --- –ö—Ä–æ–∫ 3: –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É JSON ---
        try:
            django_plan = json.loads(llm_output)
        except json.JSONDecodeError:
            logging.warning("‚ö†Ô∏è LLM output not valid JSON, wrapping raw text instead.")
            django_plan = {"raw_plan": llm_output}

        # --- –ö—Ä–æ–∫ 4: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É ---
        state.django_plan = django_plan
        log_state(node, state)

        logging.info(f"‚úÖ {node} completed. Django plan generated.")
        return state
