import logging
from agent.state import ConversionState


class ExecutorNode:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –≤—É–∑–æ–ª, —è–∫–∏–π –∫–æ–æ—Ä–¥–∏–Ω—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–∞–π–ø–ª–∞–π–Ω–∞.
    –í—ñ–Ω –Ω–µ —ñ–º–ø–æ—Ä—Ç—É—î graph –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ü–∏–∫–ª—ñ—á–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É.
    """

    def __init__(self, client, build_graph_func):
        """
        :param client: OpenAI –∫–ª—ñ—î–Ω—Ç
        :param build_graph_func: —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ–∞ (–ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –∑–∑–æ–≤–Ω—ñ)
        """
        self.client = client
        self.build_graph_func = build_graph_func

    def run(self, state: ConversionState):
        logging.info("üß© ExecutorNode started ‚Äî building conversion pipeline...")
        graph = self.build_graph_func(self.client)
        app = graph.compile()

        logging.info("üöÄ Executing full conversion pipeline...")
        final_state = app.invoke(state)

        logging.info("‚úÖ ExecutorNode finished all steps successfully.")
        return final_state
