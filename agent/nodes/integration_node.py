import os
import logging
from pathlib import Path
from agent.tools.log_utils import log_state, log_llm_call
from agent.state import ConversionState


class LLMIntegrationNode:
    """
    –ó–∞–≤–µ—Ä—à–∞–ª—å–Ω–∏–π –µ—Ç–∞–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:
    - –ì–µ–Ω–µ—Ä—É—î README.md
    - –ì–µ–Ω–µ—Ä—É—î requirements.txt
    - –ü—ñ–¥—Å—É–º–æ–≤—É—î –ø—Ä–æ—Ü–µ—Å —ñ –ª–æ–≥
    """

    def __init__(self, client, prompt_path="agent/prompts/integration_prompt.txt"):
        self.client = client
        self.prompt_path = Path(prompt_path)

    def __call__(self, state: ConversionState):
        node = "LLMIntegrationNode"
        logging.info(f"[5/6] üì¶ {node} started...")

        if not state.project_root:
            raise ValueError("‚ùå Missing project_root ‚Äî build step must run first.")

        project_root = Path(state.project_root)

        # --- 1Ô∏è‚É£ README.md ---
        readme_prompt = self.prompt_path.read_text(encoding="utf-8")
        readme_prompt = (
            readme_prompt
            .replace("{{rails_structure}}", str(state.rails_structure))
            .replace("{{django_plan}}", str(state.django_plan))
        )

        readme_response = self.client.chat.completions.create(
            model=os.getenv("MODEL_NAME", "gpt-4o"),
            messages=[{"role": "user", "content": readme_prompt}],
            temperature=0.2,
        )

        readme_md = readme_response.choices[0].message.content.strip()
        log_llm_call(node, readme_prompt, readme_md)

        with open(project_root / "README.md", "w", encoding="utf-8") as f:
            f.write(readme_md)

        # --- 2Ô∏è‚É£ requirements.txt ---
        req_prompt = "Generate minimal requirements.txt for Django 5 project with SQLite."
        req_response = self.client.chat.completions.create(
            model=os.getenv("MODEL_NAME", "gpt-4o"),
            messages=[{"role": "user", "content": req_prompt}],
            temperature=0.1,
        )
        req_text = req_response.choices[0].message.content.strip()
        log_llm_call(node, req_prompt, req_text)

        with open(project_root / "requirements.txt", "w", encoding="utf-8") as f:
            f.write(req_text)

        # --- 3Ô∏è‚É£ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É ---
        log_state(node, state)

        logging.info(f"‚úÖ {node} completed. Django project ready at {state.output_dir}")
        return state
